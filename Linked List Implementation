#include <iostream>
using namespace std;

class Node {
  public:
    int data;
    Node* next;
    
    Node(int val){
        data=val;
        next=NULL;
    }
};

class List {
    Node* head;
    Node* tail;
    
    public:
    List(){
        head=tail=NULL;
    }
    void push_front(int val){
        Node* newnode= new Node(val); // calls the constructor of NOde class and store the address   of val in newnode.
        
        if(head== NULL){
            head=tail=newnode;
            return ;
        } else {
              newnode->next=head;
              head = newnode;
              
           
        }
    }
    void push_back(int val){
        Node* newnode= new Node(val);
        
        if(head==NULL){
            head = tail = newnode;
        }
        else{
            tail->next=newnode;
            tail = newnode;
        }
    }
    void pop_front(){
        if(head==NULL){
            cout<<"LL is empty\n";
            return;
        }
        Node* temp=head;
        head=head->next;
        
        temp->next=NULL;
        delete temp;
    }
    
    void pop_back(){
        if(head==NULL){
            cout<<"LL is empty\n";
        }
        Node* temp=head;
        while(temp->next !=tail){
            temp=temp->next;
        }
        temp->next=NULL;
        delete tail;
        tail=temp;
        
    }
    void insert(int val , int pos){//insert in any position in LL
        Node* temp=head;
        if(pos<0){
            cout<<"invalid pos\n";
            return;
        } else if(pos==0){
            push_front(val);
        } 
        if(temp==NULL){
            cout<<"invalid pos\n";
            return;
        }
        for(int i=0;i<pos-1;i++){
            temp=temp->next;
            
        }
        Node* newnode=new Node(val);
        newnode->next=temp->next;
        temp->next=newnode;
        
        
    }
   
    void Print_ll(){
        Node* temp=head;
        while(temp!= NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
        }
        cout<<endl;
        
    }
     int search(int key){
        Node* temp=head;
       int idx=0;
       
       while(temp!=NULL){
           if(temp->data == key){
               return idx;
           }
           temp=temp->next;
           idx++;
       }
            
        return -1;
    }
};

int main()
{ List ll;
   ll.push_front(10);
   ll.push_front(20);
   ll.push_front(30);//pop back
   ll.push_back(35);
   ll.push_back(34);//pop back
   ll.pop_front();
   ll.pop_back();
   ll.insert(4,2);
   
   ll.Print_ll();
  cout<<ll.search(35)<<endl;

    return 0;
}
